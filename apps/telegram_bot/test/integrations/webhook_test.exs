defmodule TelegramBot.Integrations.WebhookTest do
  use ExUnit.Case, async: true
  use Plug.Test

  alias TelegramBot.WebhookPayloadMock

  @opts TelegramBot.Endpoint.init([])

  # Make a post request to our exposed endpoint simulating a Telegram webhook post request.
  #
  # It takes a mock message that can be generated by `WebhookPayloadMock` module.
  defp webhook_post(webhook_mock_message) do
    :post
    |> conn("/telegram/<token>", webhook_mock_message)
    |> TelegramBot.Endpoint.call(@opts)
  end

  defp assert_webhook_response(conn) do
    assert conn.state == :sent
    assert conn.status == 200
    assert conn.resp_body == "ok"
  end

  def start_game_engine(_context) do
    start_supervised!(%{
      id: Engine.Application,
      start: {Engine.Application, :start, [nil, nil]}
    })

    :ok
  end

  describe "/new command" do
    setup :start_game_engine

    test "handles /new" do
      webhook_mock_message = WebhookPayloadMock.message(text: "/new", type: :group)

      webhook_mock_message
      |> webhook_post()
      |> assert_webhook_response()
    end
  end
end
