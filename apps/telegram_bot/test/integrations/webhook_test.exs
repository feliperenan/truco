defmodule TelegramBot.Integrations.WebhookTest do
  use ExUnit.Case, async: true
  use Plug.Test

  alias TelegramBot.Support.WebhookPayloadMock

  @opts TelegramBot.Endpoint.init([])

  # Make a post request to our exposed endpoint simulating a Telegram webhook post request.
  #
  # It takes a mock message that can be generated by `WebhookPayloadMock` module.
  defp webhook_post(webhook_mock_message) do
    :post
    |> conn("/telegram/<token>", webhook_mock_message)
    |> TelegramBot.Endpoint.call(@opts)
  end

  defp assert_webhook_response(conn) do
    assert conn.state == :sent
    assert conn.status == 200
    assert conn.resp_body == "ok"
  end

  # Stub an answer sent by this bot to telegram through /sendMessage endpoint.
  #
  # ### Examples
  #
  #    stub_answer(bypass, %{"chat_id" => "11111", "text" => "text of the message"})
  defp stub_answer(bypass, message_to_stub) do
    Bypass.expect(bypass, "POST", "/token/sendMessage", fn conn ->
      {:ok, message, _conn} = Plug.Conn.read_body(conn)

      message_sent =
        message
        |> URI.query_decoder()
        |> Map.new()

      assert message_to_stub == message_sent

      Plug.Conn.resp(conn, 200, "ok")
    end)
  end

  defp get_chat_id(webhook_message) do
    Integer.to_string(webhook_message["message"]["chat"]["id"])
  end

  defp telegram_client_bypass(_context) do
    bypass = Bypass.open()

    Application.put_env(:nadia, :base_url, "http://localhost:#{bypass.port}/")

    {:ok, bypass: bypass}
  end

  describe "/new command" do
    setup :telegram_client_bypass

    test "handles /new@ex_truco_bot", %{bypass: bypass} do
      webhook_mock_message = WebhookPayloadMock.message(text: "/new@ex_truco_bot", type: :group)

      stub_answer(bypass, %{
        "chat_id" => get_chat_id(webhook_mock_message),
        "text" => "The game has been created and it is ready for receive players."
      })

      webhook_mock_message
      |> webhook_post()
      |> assert_webhook_response()
    end

    test "handles /new", %{bypass: bypass} do
      webhook_mock_message = WebhookPayloadMock.message(text: "/new", type: :group)

      stub_answer(bypass, %{
        "chat_id" => get_chat_id(webhook_mock_message),
        "text" => "The game has been created and it is ready for receive players."
      })

      webhook_mock_message
      |> webhook_post()
      |> assert_webhook_response()
    end

    test "does not support private message", %{bypass: bypass} do
      webhook_mock_message = WebhookPayloadMock.message(text: "/new", type: :private)

      text = ~s"""
      I can't start a game from a private conversation.

      In order to play the game, you need to create a group with people you want to play."
      """

      stub_answer(bypass, %{
        "chat_id" => get_chat_id(webhook_mock_message),
        "text" => text
      })

      webhook_mock_message
      |> webhook_post()
      |> assert_webhook_response()
    end
  end
end
